{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n// imports\nimport \"./PriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n// import \"hardhat/consol.sol\"; // use consol.log in solidity file (doesnt work yet)\n\n// Error codes: NameOfContract__ErrorName\nerror FundMe__NotOwner();\nerror FundMe__InsufficientDonation();\n\n/**\n * @title A contract for crowd funding\n * @author My name\n * @notice This contract is a demo\n * @dev This implements price feeds as our library\n */\ncontract FundMe {\n    // Type declarations\n    using PriceConverter for uint256;\n\n    // State Variables\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address private immutable i_owner;\n    address[] private s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n\n    AggregatorV3Interface private s_priceFeed;\n\n    // Events\n    // Modifier\n    modifier onlyOwner() {\n        // require(owner == msg.sender, \"Not Owner!\");\n        // use customer owner instead of storing a string in require saves gas\n        if (i_owner != msg.sender) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    // take argument of address of price feed depends on the chain we deploy it on\n    constructor(address priceFeedAddress) {\n        i_owner = payable(msg.sender);\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n        // consol.log(\"Price feed address set.\");\n    }\n\n    // Explainer from: https://solidity-by-example.org/fallback/\n    // Ether is sent to contract\n    //      is msg.data empty?\n    //          /   \\\n    //         yes  no\n    //         /     \\\n    //    receive()?  fallback()\n    //     /   \\\n    //   yes   no\n    //  /        \\\n    //receive()  fallback()\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /**\n     * @notice fund the contract\n     * @dev This implements price feeds as our library\n     */\n    function fund() public payable {\n        // if requirement fails, revert error\n        if (msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD) {\n            revert FundMe__InsufficientDonation();\n        } // 1e18 == 1 * 10 ** 18 in wei, is 1 eth\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    /**\n     * @notice withdraw the fund\n     * @dev This implements price feeds as our library\n     */\n    function withdraw() public payable onlyOwner {\n        // reset array and mapping\n        for (uint256 i = 0; i < s_funders.length; i++) {\n            address funder = s_funders[i];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        // reset array\n        s_funders = new address[](0);\n        // withdraw fund\n\n        // transfer (capped 2300 gas, throw an error)\n        /* payable(msg.sender).transfer(address(this).balance); */\n\n        // send (capped 2300 gas, return bool)\n        /* bool sendSuccess = payable(msg.sender).send(address(this).balance);\n\n        require(sendSuccess, \"Send failed\"); // revert previous action if fails */\n        // call, forward all gas or set gas, returns bool and return data, recommended way\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\"); // revert previous action if fails\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            // mapping cannot be in memory\n            s_addressToAmountFunded[funder] = 0;\n        }\n        // reset array\n        s_funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    // view / pure\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAddressToAmountFunded(\n        address funder\n    ) public view returns (uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/FunWithStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ncontract FunWithStorage {\n    uint256 favoriteNumber; // Stored at slot 0\n    bool someBool; // Stored at slot 1\n    uint256[] myArray; /* Array Length Stored at slot 2,\n    but the objects will be the keccak256(2), since 2 is the storage slot of the array */\n    mapping(uint256 => bool) myMap; /* An empty slot is held at slot 3\n    and the elements will be stored at keccak256(h(k) . p)\n\n    p: The storage slot (aka, 3)\n    k: The key in hex\n    h: Some function based on the type. For uint256, it just pads the hex\n    */\n    uint256 constant NOT_IN_STORAGE = 123;\n    uint256 immutable i_not_in_storage;\n\n    constructor() {\n        favoriteNumber = 25; // See stored spot above // SSTORE\n        someBool = true; // See stored spot above // SSTORE\n        myArray.push(222); // SSTORE\n        myMap[0] = true; // SSTORE\n        i_not_in_storage = 123;\n    }\n\n    function doStuff() public {\n        uint256 newVar = favoriteNumber + 1; // SLOAD\n        bool otherVar = someBool; // SLOAD\n        // ^^ memory variables\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH in USD, decimal 8, msg.value is 18 decimal\n        return uint256(price * 1e10);\n    }\n\n    // get ETHUSD rate\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUSD;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}