{
  "address": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__InsufficientDonation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb6de7b7409e470bda8df94bc8ce3567ce7777aeb2765a7234389f1e5b6a02047",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x71C95911E9a5D330f4D621842EC243EE1343292e",
    "transactionIndex": 0,
    "gasUsed": "991200",
    "logsBloom": "0x
    "blockHash": "0x831c6c94fa69ba46cd0fa707ba8b26d4bfe666af009f769e79b3a4ed462a0d0d",
    "transactionHash": "0xb6de7b7409e470bda8df94bc8ce3567ce7777aeb2765a7234389f1e5b6a02047",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "991200",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8464135c8F25Da09e49BC8782676a84730C318bC"
  ],
  "numDeployments": 1,
  "solcInputHash": "d22123cca06ff5d060e82f315d37a7d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__InsufficientDonation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"My name\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"},\"withdraw()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"fund the contract\"},\"withdraw()\":{\"notice\":\"withdraw the fund\"}},\"notice\":\"This contract is a demo\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n// imports\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// import \\\"hardhat/consol.sol\\\"; // use consol.log in solidity file (doesnt work yet)\\n\\n// Error codes: NameOfContract__ErrorName\\nerror FundMe__NotOwner();\\nerror FundMe__InsufficientDonation();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author My name\\n * @notice This contract is a demo\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events\\n    // Modifier\\n    modifier onlyOwner() {\\n        // require(owner == msg.sender, \\\"Not Owner!\\\");\\n        // use customer owner instead of storing a string in require saves gas\\n        if (i_owner != msg.sender) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    // take argument of address of price feed depends on the chain we deploy it on\\n    constructor(address priceFeedAddress) {\\n        i_owner = payable(msg.sender);\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        // consol.log(\\\"Price feed address set.\\\");\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice fund the contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        // if requirement fails, revert error\\n        if (msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD) {\\n            revert FundMe__InsufficientDonation();\\n        } // 1e18 == 1 * 10 ** 18 in wei, is 1 eth\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    /**\\n     * @notice withdraw the fund\\n     * @dev This implements price feeds as our library\\n     */\\n    function withdraw() public payable onlyOwner {\\n        // reset array and mapping\\n        for (uint256 i = 0; i < s_funders.length; i++) {\\n            address funder = s_funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // reset array\\n        s_funders = new address[](0);\\n        // withdraw fund\\n\\n        // transfer (capped 2300 gas, throw an error)\\n        /* payable(msg.sender).transfer(address(this).balance); */\\n\\n        // send (capped 2300 gas, return bool)\\n        /* bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n\\n        require(sendSuccess, \\\"Send failed\\\"); // revert previous action if fails */\\n        // call, forward all gas or set gas, returns bool and return data, recommended way\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\"); // revert previous action if fails\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            // mapping cannot be in memory\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // reset array\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // view / pure\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xbada799fb5c8ad2ccd25907f2a4c7ee59f95e0461faad280ad403a8ff758f175\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH in USD, decimal 8, msg.value is 18 decimal\\n        return uint256(price * 1e10);\\n    }\\n\\n    // get ETHUSD rate\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUSD;\\n    }\\n}\\n\",\"keccak256\":\"0xfb1372e0ded02ed293d916aba1a806b7fe3f18a888b5c62d607beeef3c5a77e6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200120f3803806200120f833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6110906200017f600039600081816103330152818161056b01526105d201526110906000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a8a565b6102d1565b6040516100cc9190610ad0565b60405180910390f35b6100dd61031a565b005b3480156100eb57600080fd5b506100f461055a565b6040516101019190610ad0565b60405180910390f35b34801561011657600080fd5b5061011f610567565b60405161012c9190610afa565b60405180910390f35b34801561014157600080fd5b5061014a61058f565b6040516101579190610b74565b60405180910390f35b6101686101b1565b005b6101726105b9565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bbb565b61085d565b6040516101a89190610afa565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a490919063ffffffff16565b1015610228576040517ff5a8c4e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461039f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561044a5760008082815481106103c4576103c3610be8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044290610c46565b9150506103a2565b50600067ffffffffffffffff81111561046657610465610c8f565b5b6040519080825280602002602001820160405280156104945781602001602082028036833780820191505090505b50600090805190602001906104aa929190610980565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d190610cef565b60006040518083038185875af1925050503d806000811461050e576040519150601f19603f3d011682016040523d82523d6000602084013e610513565b606091505b5050905080610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90610d61565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461063e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106c157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610677575b5050505050905060005b815181101561074c5760008282815181106106e9576106e8610be8565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074490610c46565b9150506106cb565b50600067ffffffffffffffff81111561076857610767610c8f565b5b6040519080825280602002602001820160405280156107965781602001602082028036833780820191505090505b50600090805190602001906107ac929190610980565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107d390610cef565b60006040518083038185875af1925050503d8060008114610810576040519150601f19603f3d011682016040523d82523d6000602084013e610815565b606091505b5050905080610859576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085090610d61565b60405180910390fd5b5050565b600080828154811061087257610871610be8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108b0836108e0565b90506000670de0b6b3a764000085836108c99190610d81565b6108d39190610e0a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092957600080fd5b505afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109619190610ec8565b5050509150506402540be400816109789190610f43565b915050919050565b8280548282559060005260206000209081019282156109f9579160200282015b828111156109f85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109a0565b5b509050610a069190610a0a565b5090565b5b80821115610a23576000816000905550600101610a0b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5782610a2c565b9050919050565b610a6781610a4c565b8114610a7257600080fd5b50565b600081359050610a8481610a5e565b92915050565b600060208284031215610aa057610a9f610a27565b5b6000610aae84828501610a75565b91505092915050565b6000819050919050565b610aca81610ab7565b82525050565b6000602082019050610ae56000830184610ac1565b92915050565b610af481610a4c565b82525050565b6000602082019050610b0f6000830184610aeb565b92915050565b6000819050919050565b6000610b3a610b35610b3084610a2c565b610b15565b610a2c565b9050919050565b6000610b4c82610b1f565b9050919050565b6000610b5e82610b41565b9050919050565b610b6e81610b53565b82525050565b6000602082019050610b896000830184610b65565b92915050565b610b9881610ab7565b8114610ba357600080fd5b50565b600081359050610bb581610b8f565b92915050565b600060208284031215610bd157610bd0610a27565b5b6000610bdf84828501610ba6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c5182610ab7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c8457610c83610c17565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cd9600083610cbe565b9150610ce482610cc9565b600082019050919050565b6000610cfa82610ccc565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d4b600b83610d04565b9150610d5682610d15565b602082019050919050565b60006020820190508181036000830152610d7a81610d3e565b9050919050565b6000610d8c82610ab7565b9150610d9783610ab7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dd057610dcf610c17565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e1582610ab7565b9150610e2083610ab7565b925082610e3057610e2f610ddb565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e5a81610e3b565b8114610e6557600080fd5b50565b600081519050610e7781610e51565b92915050565b6000819050919050565b610e9081610e7d565b8114610e9b57600080fd5b50565b600081519050610ead81610e87565b92915050565b600081519050610ec281610b8f565b92915050565b600080600080600060a08688031215610ee457610ee3610a27565b5b6000610ef288828901610e68565b9550506020610f0388828901610e9e565b9450506040610f1488828901610eb3565b9350506060610f2588828901610eb3565b9250506080610f3688828901610e68565b9150509295509295909350565b6000610f4e82610e7d565b9150610f5983610e7d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f9857610f97610c17565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610fd557610fd4610c17565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561101257611011610c17565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561104f5761104e610c17565b5b82820290509291505056fea2646970667358221220c5c2c80f6eb3b5fd2e8d6dbb5eb0879387848be2102e6fd64afca01291d56c0964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a8a565b6102d1565b6040516100cc9190610ad0565b60405180910390f35b6100dd61031a565b005b3480156100eb57600080fd5b506100f461055a565b6040516101019190610ad0565b60405180910390f35b34801561011657600080fd5b5061011f610567565b60405161012c9190610afa565b60405180910390f35b34801561014157600080fd5b5061014a61058f565b6040516101579190610b74565b60405180910390f35b6101686101b1565b005b6101726105b9565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bbb565b61085d565b6040516101a89190610afa565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a490919063ffffffff16565b1015610228576040517ff5a8c4e500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461039f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561044a5760008082815481106103c4576103c3610be8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044290610c46565b9150506103a2565b50600067ffffffffffffffff81111561046657610465610c8f565b5b6040519080825280602002602001820160405280156104945781602001602082028036833780820191505090505b50600090805190602001906104aa929190610980565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d190610cef565b60006040518083038185875af1925050503d806000811461050e576040519150601f19603f3d011682016040523d82523d6000602084013e610513565b606091505b5050905080610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90610d61565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161461063e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106c157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610677575b5050505050905060005b815181101561074c5760008282815181106106e9576106e8610be8565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074490610c46565b9150506106cb565b50600067ffffffffffffffff81111561076857610767610c8f565b5b6040519080825280602002602001820160405280156107965781602001602082028036833780820191505090505b50600090805190602001906107ac929190610980565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107d390610cef565b60006040518083038185875af1925050503d8060008114610810576040519150601f19603f3d011682016040523d82523d6000602084013e610815565b606091505b5050905080610859576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085090610d61565b60405180910390fd5b5050565b600080828154811061087257610871610be8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108b0836108e0565b90506000670de0b6b3a764000085836108c99190610d81565b6108d39190610e0a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092957600080fd5b505afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109619190610ec8565b5050509150506402540be400816109789190610f43565b915050919050565b8280548282559060005260206000209081019282156109f9579160200282015b828111156109f85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109a0565b5b509050610a069190610a0a565b5090565b5b80821115610a23576000816000905550600101610a0b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5782610a2c565b9050919050565b610a6781610a4c565b8114610a7257600080fd5b50565b600081359050610a8481610a5e565b92915050565b600060208284031215610aa057610a9f610a27565b5b6000610aae84828501610a75565b91505092915050565b6000819050919050565b610aca81610ab7565b82525050565b6000602082019050610ae56000830184610ac1565b92915050565b610af481610a4c565b82525050565b6000602082019050610b0f6000830184610aeb565b92915050565b6000819050919050565b6000610b3a610b35610b3084610a2c565b610b15565b610a2c565b9050919050565b6000610b4c82610b1f565b9050919050565b6000610b5e82610b41565b9050919050565b610b6e81610b53565b82525050565b6000602082019050610b896000830184610b65565b92915050565b610b9881610ab7565b8114610ba357600080fd5b50565b600081359050610bb581610b8f565b92915050565b600060208284031215610bd157610bd0610a27565b5b6000610bdf84828501610ba6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c5182610ab7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c8457610c83610c17565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cd9600083610cbe565b9150610ce482610cc9565b600082019050919050565b6000610cfa82610ccc565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d4b600b83610d04565b9150610d5682610d15565b602082019050919050565b60006020820190508181036000830152610d7a81610d3e565b9050919050565b6000610d8c82610ab7565b9150610d9783610ab7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dd057610dcf610c17565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e1582610ab7565b9150610e2083610ab7565b925082610e3057610e2f610ddb565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e5a81610e3b565b8114610e6557600080fd5b50565b600081519050610e7781610e51565b92915050565b6000819050919050565b610e9081610e7d565b8114610e9b57600080fd5b50565b600081519050610ead81610e87565b92915050565b600081519050610ec281610b8f565b92915050565b600080600080600060a08688031215610ee457610ee3610a27565b5b6000610ef288828901610e68565b9550506020610f0388828901610e9e565b9450506040610f1488828901610eb3565b9350506060610f2588828901610eb3565b9250506080610f3688828901610e68565b9150509295509295909350565b6000610f4e82610e7d565b9150610f5983610e7d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f9857610f97610c17565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610fd557610fd4610c17565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561101257611011610c17565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561104f5761104e610c17565b5b82820290509291505056fea2646970667358221220c5c2c80f6eb3b5fd2e8d6dbb5eb0879387848be2102e6fd64afca01291d56c0964736f6c63430008080033",
  "devdoc": {
    "author": "My name",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      },
      "withdraw()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "fund the contract"
      },
      "withdraw()": {
        "notice": "withdraw the fund"
      }
    },
    "notice": "This contract is a demo",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 128,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 135,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}